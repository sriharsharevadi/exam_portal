# Generated by Django 2.2 on 2020-06-13 11:57

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import phonenumber_field.modelfields


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='Batch',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255)),
                ('start_time', models.DateField(blank=True)),
                ('end_time', models.DateField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Exam',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255)),
                ('live_from', models.DateField(blank=True)),
                ('live_to', models.DateField(blank=True)),
                ('duration', models.IntegerField(blank=True)),
                ('batches', models.ManyToManyField(to='webapp.Batch')),
            ],
        ),
        migrations.CreateModel(
            name='Institute',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=30)),
                ('is_verified', models.BooleanField(default=False)),
                ('subscription', models.CharField(blank=True, choices=[('d', 'Default')], max_length=2)),
                ('address', models.CharField(blank=True, max_length=255)),
                ('city', models.CharField(blank=True, max_length=255)),
                ('state', models.CharField(blank=True, max_length=255)),
                ('mobile', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=15, region=None)),
                ('alternate_mobile', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=15, region=None)),
                ('student_cap', models.IntegerField(blank=True)),
                ('expiry_date', models.DateField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Paper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=255)),
                ('exam_type', models.CharField(blank=True, choices=[('m', 'JEE MAINS'), ('a', 'JEE ADVANCED'), ('o', 'OTHERS')], max_length=1)),
                ('institute_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='paper_institute', to='webapp.Institute')),
            ],
        ),
        migrations.CreateModel(
            name='Student',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('roll_number', models.CharField(blank=True, max_length=30)),
                ('first_name', models.CharField(blank=True, max_length=30)),
                ('last_name', models.CharField(blank=True, max_length=30)),
                ('city', models.CharField(blank=True, max_length=255)),
                ('is_verified', models.BooleanField(default=False)),
                ('mobile', phonenumber_field.modelfields.PhoneNumberField(blank=True, max_length=15, region=None)),
                ('expity_date', models.DateField(blank=True)),
                ('batch_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='webapp.Batch')),
                ('institute_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='student_institute', to='webapp.Institute')),
            ],
        ),
        migrations.CreateModel(
            name='Section',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, choices=[('m', 'MATHS'), ('p', 'PHYSICS'), ('c', 'CHEMISTRY')], max_length=1)),
                ('paper_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='section_paper', to='webapp.Paper')),
            ],
        ),
        migrations.CreateModel(
            name='Result',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('started', models.DateField(blank=True)),
                ('ended', models.DateField(blank=True)),
                ('marks_secured', models.IntegerField(blank=True)),
                ('exam_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='result_exam', to='webapp.Exam')),
                ('student_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='result_student', to='webapp.Paper')),
            ],
        ),
        migrations.CreateModel(
            name='Question',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('question_type', models.CharField(blank=True, choices=[('s', 'SINGLE CORRECT ANSWER'), ('p', 'INTEGER TYPE'), ('c', 'MULTIPLE CORRECT ANSWER')], max_length=1)),
                ('max_marks', models.IntegerField(blank=True)),
                ('question', models.CharField(blank=True, max_length=255)),
                ('option_1', models.CharField(blank=True, max_length=255)),
                ('option_2', models.CharField(blank=True, max_length=255)),
                ('option_3', models.CharField(blank=True, max_length=255)),
                ('option_4', models.CharField(blank=True, max_length=255)),
                ('image_url', models.CharField(blank=True, max_length=255)),
                ('correct_answer', models.IntegerField(blank=True)),
                ('section_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='question_section', to='webapp.Section')),
            ],
        ),
        migrations.AddField(
            model_name='exam',
            name='paper_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='exam_paper', to='webapp.Paper'),
        ),
        migrations.AddField(
            model_name='batch',
            name='institute_id',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='batch_institute', to='webapp.Institute'),
        ),
        migrations.CreateModel(
            name='AttemptedQuestion',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('answer_given', models.IntegerField(blank=True)),
                ('marks_secured', models.IntegerField(blank=True)),
                ('time_taken', models.IntegerField(blank=True)),
                ('question_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempted_question_question', to='webapp.Question')),
                ('result_id', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='attempted_question_result', to='webapp.Result')),
            ],
        ),
        migrations.CreateModel(
            name='BaseUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('is_institute', models.BooleanField(default=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
